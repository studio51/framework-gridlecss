@import "config";

:root {
  --grid-xs-container: 100%;
  --grid-sm-container: calc( #{ $grid-sm-min + $grid-gutter });
  --grid-md-container: calc( #{ $grid-md-min + $grid-gutter });
  --grid-lg-container: calc( #{ $grid-lg-min + $grid-gutter });
  --grid-gutter: $grid-gutter;
  --grid-gutter-calc: calc( var(--grid-gutter) / 2);
}

@import "gridlecss/mixins";

*,
*:before,
*:after {
  box-sizing: border-box;
}

.grid,
.grid--fluid {
  margin-left: auto;
  margin-right: auto;
  width: 100%;
  height: 100%;
}

  .row,
  .column {
    display: flex;
  }

  .row {
    flex: 0 1 auto;
    flex-direction: row;
    flex-wrap: wrap;
    margin-left: -( var(--grid-gutter-calc));
    margin-right: -( var(--grid-gutter-calc));

    &--reverse {
      flex-direction: row-reverse;
    }
  }

  .column {
    flex-direction: column;

    &--reverse {
      flex-direction: column-reverse;
    }
  }

    @if $flex-distribution {
      @each $distribution in $flex-distributions {

        .distribute-#{ $distribution } {
          justify-content: space-#{ $distribution };
        }
      }
    }

    @if $flex-alignment {
      @each $alignment in $flex-alignments {
        @include flex-alignments( ".align-", nth($alignment, 1), nth($alignment, 2), "parent");
      }
    }

    .cell {
      margin-left: var(--grid-gutter-calc);
      margin-right: var(--grid-gutter-calc);
      flex-basis: 100%;
      max-width: 100%;

      &-order {
        &--first {
          order: -1;
        }

        &--last {
          order: 1;
        }
      }

      @if $flex-alignment {

        &-align {

          @each $alignment in $flex-alignments {
            @include flex-alignments( "&--", "y", nth($alignment, 2), "child");
          }
        }
      }
    }

    %cell-styles {
      display: flex;
      flex: 1 0 auto;
      flex-direction: column;
    }

@each $breakpoint in $grid-breakpoints {

  @include media("screen", $breakpoint) {

    .grid {
      width: var(--grid-#{ $breakpoint }-container);
    }

    // Compiles: distribute-* for each viewport
    //
    .distribute-#{ $breakpoint } {

      @if $flex-distribution {
        @each $distribution-option in $flex-distributions {

          &-#{ $distribution-option } {
            justify-content: space-#{ $distribution-option };
          }
        }
      }
    }

    // Compiles: align-* for each viewport
    //
    .align-#{ $breakpoint } {

      @if $flex-alignment {
        @each $align-option in $flex-alignments {
          @include flex-alignments( "&-", nth($align-option, 1), nth($align-option, 2), "parent");
        }
      }
    }

    // Compiles: cell-*, cell-*-# and cell-*-offset-# for each viewport
    //
    @for $i from 1 through $grid-columns {

      .cell-#{ $breakpoint },
      .cell-#{ $breakpoint }-#{ $i },
      .cell-#{ $breakpoint }-offset-#{ $i } {
        @extend %cell-styles;
      }
    }

    // Compiles: cell-* for each viewport
    //
    .cell-#{ $breakpoint } {
      flex: 1 0;
      flex-basis: 0;
      max-width: 100%;

      &-order {
        &--first {
          order: -1;
        }

        &--last {
          order: 1;
        }
      }

      &-offset {
        margin-left: $grid-gutter !important;
      }

      @if $flex-alignment {

        &-align {

          @each $alignment in $flex-alignments {
            @include flex-alignments( "&--", "y", nth($alignment, 2), "child");
          }
        }
      }
    }

    @for $i from 1 through $grid-columns {
      $grid-column-width: (( 100 / $grid-columns ) * $i ) * 1%;
      $grid-gutter-calc: $grid-gutter / ( $grid-gutter * 0 + 1 );

      // Compiles: cell-*-# for each viewport
      //
      .cell-#{ $breakpoint }-#{ $i } {
        flex-basis: $grid-column-width - $grid-gutter-calc;
        max-width: $grid-column-width;
      }

      // Compiles: cell-*-offset-# for each viewport
      //
      .cell-#{ $breakpoint }-offset-#{ $i } {
        margin-left: $grid-column-width !important;
      }
    }
  }
}
