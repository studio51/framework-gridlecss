$grid-columns: 12;

$grid-sm-min: 40.063em;
$grid-md-min: 64.063em;
$grid-lg-min: 90.063em;

$gap: 10px;

:root {
  --border-size: 2px;
  --border-olor: #000;
  --grid-sm-min: $grid-sm-min;
  --grid-md-min: $grid-md-min;
  --grid-lg-min: $grid-lg-min;
}

@import "mixins";

*,
*:before,
*:after {
  @include box-sizing;
}

.grid,
.grid-fluid {
  width: 100%;
  margin-left: auto;
  margin-right: auto;
}

.row {
  @include flexbox;

  @include flex;
  @include flex-direction(row);
  @include flex-wrap;

  padding: $gap/2;
  &.reverse {
    @include flex-direction(row-reverse);
  }
}

.cell {
  // margin-left: 1px;
  // margin-right: 1px;
  margin-bottom: 1px;

    margin: $gap/2;

  &.reverse {
    @include flex-direction(row-reverse);
  }
}

%cell-styles {
  @include flexbox;

  @include flex;
  @include flex-direction;
  @include flex-grow;
  @include flex-shrink(0);
}

$grid-breakpoints: xs sm md lg;

// For each breakpoint we have specified, we create a block
//
// dependency: $grid-breakpoints
//
@each $breakpoint in $grid-breakpoints {

  // Starting with the first ( not 0 ) breakpoint, we create media queries for
  // responsiveness
  //
  // dependency: mixins.scss @media
  //
  @include media("screen", $breakpoint) {

    // This is where we define the width of the grids container
    //
    .grid {
      width: var(--grid-#{ $breakpoint }-min);
    }

    // From 1 to 12, where "$grid-columns" is the number of our columns we
    // defined, we create the cells of the grid
    //
    // Generates: cell-*, cell-*-# and cell-*-offset-#
    //
    @for $i from 1 through $grid-columns {

      .cell-#{ $breakpoint },
      .cell-#{ $breakpoint }-#{ $i },
      .cell-#{ $breakpoint }-offset-#{ $i } {
        @extend %cell-styles;
      }
    }

    .cell-#{ $breakpoint } {

      @include flex-grow(1);
      @include flex-basis(0);

      max-width: 100%;
    }

    @for $i from 1 through $grid-columns {
      $calc: (( 100 / $grid-columns ) * $i) * 1%;

      .cell-#{ $breakpoint }-#{ $i } {
        @include flex-basis(calc(#{$calc} - #{$gap}));

        max-width: $calc;
      }

      .cell-#{ $breakpoint }-offset-#{ $i } {
        margin-left: $calc;
      }
    }
  }
}

/* Helpers */

  .align {
    &-center {
      flex: 1;
      align-items: center;

      > div {
        // justify-content: center;
      }
    }
  }

  /* Stretch row' height to fit the parent height */


  // .cell-full {
  //   flex: 1;

  //   &__child {
  //     flex: 1;

  //     .row {
  //       flex: 1;
  //     }
  //   }
  // }
