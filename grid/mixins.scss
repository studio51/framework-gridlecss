@mixin box-sizing {
  box-sizing: border-box;
}

@mixin flexbox {
  display: flex;
}

@mixin flex( $string: 0 1 auto ) {
  flex: $string;
}

  @mixin flex-grow( $value: 0 ) {
    flex-grow: $value;
  }

  @mixin flex-shrink( $value: 1 ) {
    flex-shrink: $value;
  }

  @mixin flex-basis( $value: auto ) {
    flex-basis: $value;
  }

@mixin flex-direction( $direction: column ) {
  flex-direction: $direction;
}

@mixin flex-flow {
  flex-flow: row wrap;
}

@mixin flex-wrap {
  flex-wrap: wrap;
}

// Conditional Media Query
//
// http://codepen.io/dsheiko/pen/KeLGy

@function translate-media-condition( $condition ) {
  $map: (
    "screen": "only screen",
    "xs": "",
    "sm": " and (min-width: #{$grid-sm-min})",
    "md": " and (min-width: #{$grid-md-min})",
    "lg": " and (min-width: #{$grid-lg-min})"
  );

  @return map-get( $map, $condition );
}

@mixin media($args...) {
  $query: "";

  @each $arg in $args {
    $query: $query + translate-media-condition($arg);
  }

  @media #{ $query }  { @content; }
}

// Generate Flex Alignments

@mixin flex-alignments( $parent, $axis, $class ) {

  @each $element in $class {

    #{ $parent }-#{ nth( $element, 1 )} {

      @if $axis == "x" and not $element == "center" {

        justify-content: flex-#{ $element };
        text-align: unquote( $element );

      } @else if $element == "center" {

        justify-content: center;
        text-align: center;
      }

      @if $axis == "y" {

        align-items: unquote(nth( $element, 2 ));
      }
    }
  }
}
