*,
*:before,
*:after {
  @include box-sizing;
}

.grid,
.grid-fluid {
  @include box-sizing;

  margin-left: auto;
  margin-right: auto;
  width: 100%;
}

.row {
  @include flexbox;

  @include flex;
  @include flex-direction(row);
  @include flex-wrap;

  &.reverse {
    @include flex-direction(row-reverse);
  }
}

.cell {

  &-first { order: -1 }
  &-last { order: 1 }

  width: 100%;
}

%cell-styles {
  @include flexbox;

  @include flex;
  @include flex-direction;
  @include flex-grow;
  @include flex-shrink(0);
}

// Distribution for around and between
//
@if $flex-distribution {
  @each $distribution-option in $flex-distributions {

    .cells-#{ $distribution-option } {
      justify-content: space-#{ $distribution-option };
    }
  }
}

// Alignments for main axis  (x): start, center, end
// Alignments for cross axis (y): top, middle, bottom, baseline
//
@if $flex-alignment {
  @each $align-option in $flex-alignments {
    @include flex-alignments( ".cells", nth($align-option, 1), nth($align-option, 2));
  }
}

// Create the Grid
//
@each $breakpoint in $grid-breakpoints {

  // Starting with the first ( not 0 ) breakpoint, we create media queries for
  // responsiveness
  //
  @include media("screen", $breakpoint) {

    // This is where we define the width of the grids container
    //
    .grid {
      width: var(--grid-#{ $breakpoint }-container);
    }

    // From 1 to 12, where "$grid-columns" is the number of our columns we
    // defined, we create the cells of the grid
    //
    // Generates: cell-*, cell-*-# and cell-*-offset-#
    //
    @for $i from 1 through $grid-columns {

      .cell-#{ $breakpoint },
      .cell-#{ $breakpoint }-#{ $i },
      .cell-#{ $breakpoint }-offset-#{ $i } {
        @extend %cell-styles;
      }
    }

    .cell-#{ $breakpoint } {

      @include flex-grow(1);
      @include flex-basis(0);

      max-width: 100%;

      &-first { order: -1; }
      &-last { order: 1; }
    }

    .cells-#{ $breakpoint } {

      // Distribution for around and between for each $breakpoint defined
      //
      @if $flex-distribution {
        @each $distribution-option in $flex-distributions {

          &-#{ $distribution-option } {
            justify-content: space-#{ $distribution-option };
          }
        }
      }

      // Alignments for each $breakpoint defined
      //
      @if $flex-alignment {
        @each $align-option in $flex-alignments {
          @include flex-alignments( "&", nth($align-option, 1), nth($align-option, 2));
        }
      }
    }

    @for $i from 1 through $grid-columns {
      $calc: (( 100 / $grid-columns ) * $i ) * 1%;

      .cell-#{ $breakpoint }-#{ $i } {
        @include flex-basis(calc(#{ $calc } - #{ var(--grid-gutter) }));

        max-width: $calc;
      }

      .cell-#{ $breakpoint }-offset-#{ $i } {
        margin-left: calc(#{ $calc } - #{ var(--grid-gutter) });
      }
    }
  }
}
