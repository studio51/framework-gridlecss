@import "config";

:root {
  --grid-gutter: $grid-gutter;
  --grid-xs-container: 100%;
  --grid-sm-container: $grid-sm-min;
  --grid-md-container: $grid-md-min;
  --grid-lg-container: $grid-lg-min;
  --grid-gutter-half: calc( var(--grid-gutter) / 2 );
  --grid-gutter-compensation: calc( var(--grid-gutter) / 2 * - 1 );
}

@import "gridlecss/mixins";

*,
*:before,
*:after {
  box-sizing: border-box;
}

.grid,
.grid--fluid {
  margin-left: auto;
  margin-right: auto;
}

  .row,
  .column {
    display: flex;
  }

  .row {
    // flex: 1 0 auto;
    flex-direction: row;
    flex-wrap: wrap;

    margin-left: var(--grid-gutter-compensation);
    margin-right: var(--grid-gutter-compensation);
    // margin-left: -(var(--grid-gutter));
    // margin-right: -(var(--grid-gutter));

    // &--reverse {
    //   flex-direction: row-reverse;
    // }
  }

  // .column {
  //   flex-direction: column;

  //   &--reverse {
  //     flex-direction: column-reverse;
  //   }
  // }

    // @if $flex-distribution {
    //   @each $distribution in $flex-distributions {

    //     .distribute-#{ $distribution } {
    //       justify-content: space-#{ $distribution };
    //     }
    //   }
    // }

    // @if $flex-alignment {
    //   @each $alignment in $flex-alignments {
    //     @include flex-alignments( ".align-", nth($alignment, 1), nth($alignment, 2), "parent");
    //   }
    // }

    .cell {
      // flex: 0 0 auto;
      // padding: 15px;
      // margin: $grid-gutter;
      display: flex;
  flex-direction: column;
  flex-grow: 0;
  flex-shrink: 0;
      margin: var(--grid-gutter-half);
      // border-left: var(--grid-gutter-half) solid transparent;
      // border-right: var(--grid-gutter-half) solid transparent;
      padding: 15px;
      // margin-left: var(--grid-gutter);
      // margin-right: var(--grid-gutter);
      // flex-basis: 100%;
      // max-width: 100%;

      // padding: 1px;
      // background-clip: content-box;

      // &-order {
      //   &--first {
      //     order: -1;
      //   }

      //   &--last {
      //     order: 1;
      //   }
      // }

      // @if $flex-alignment {

      //   &-align {

      //     @each $alignment in $flex-alignments {
      //       @include flex-alignments( "&--", "y", nth($alignment, 2), "child");
      //     }
      //   }
      // }
    }

      %cell-styles {
        // flex: 0 0 auto;
        // box-sizing: border-box;
      }

@each $breakpoint in $grid-breakpoints {

  @include breakpoint($breakpoint) {
    // %cell-styles {
// flex: 0 0 auto;
      // flex: 1 1 auto;
      // flex-grow: 0;
      // flex-shrink: 0;

      // display: flex;
      // flex: 1 0 auto;
      // flex-direction: column;
    // }
    .grid {
      width: var(--grid-#{ $breakpoint }-container);
      // width: 100%;
      // padding: 0 100px;
    }

    // Compiles: distribute-* for each viewport
    //
    // .distribute-#{ $breakpoint } {

    //   @if $flex-distribution {
    //     @each $distribution-option in $flex-distributions {

    //       &-#{ $distribution-option } {
    //         justify-content: space-#{ $distribution-option };
    //       }
    //     }
    //   }
    // }

    // Compiles: align-* for each viewport
    //
    // .align-#{ $breakpoint } {

    //   @if $flex-alignment {
    //     @each $align-option in $flex-alignments {
    //       @include flex-alignments( "&-", nth($align-option, 1), nth($align-option, 2), "parent");
    //     }
    //   }
    // }

    // Compiles: cell-*, cell-*-# and cell-*-offset-# for each viewport
    //
    @for $i from 1 through $grid-columns {



      .cell-#{ $breakpoint },
      .cell-#{ $breakpoint }-#{ $i },
      .cell-#{ $breakpoint }-offset-#{ $i } {
        @extend %cell-styles;

      }
    }

    // Compiles: cell-* for each viewport
    //
    .cell-#{ $breakpoint } {

      // flex-grow: 1;
      // flex-basis: 0;
      // max-width: 100%;
      // flex: 0 0;
      // flex-grow: 0;
      // flex-shrink: 1;
      // flex-basis: auto;
      // max-width: 100%;

      // &-order {
      //   &--first {
      //     order: -1;
      //   }

      //   &--last {
      //     order: 1;
      //   }
      // }

      // &-offset {
      //   // margin-left: $grid-gutter;
      // }

      // @if $flex-alignment {

      //   &-align {

      //     @each $alignment in $flex-alignments {
      //       @include flex-alignments( "&--", "y", nth($alignment, 2), "child");
      //     }
      //   }
      // }
    }

    @function pxtopercent($target, $parent) {
      @return percentage($target / $parent);
    }


    @function cell-width() {
      // @return percentage($cell-width * $cell-no);

      @return (100%/$grid-columns) * $i - $grid-gutter;
    }

    @for $i from 1 through $grid-columns {

      // Get the required width in percent for each column
      //
      // 12 / 100 = 8.333333%
      // 12 / 100 * $i ( which can be 1 to 12 ) will equall the necessary width
      // for each cell, 8.333, 16.6666, 33.3333 and so on
      $grid-column-width: (( 100 / $grid-columns ) * $i);
      $grid-gutter-calc: $grid-gutter / ( $grid-gutter * 0 + 1 );
      $grid-column-width2: $grid-column-width - ($grid-gutter-calc * 2 / $grid-column-width);

      // $grid-real-width: $grid-column-width - pxtopercent($grid-gutter-calc, $grid-column-width);

      // Compiles: cell-*-# for each viewport
      //
      .cell-#{ $breakpoint } {
        flex-grow: 1;
        flex-basis: 0;
        max-width: 100%;
        // flex: 1;
        // flex-grow: 1;
        // flex-basis: 0;
        // max-width: 100%;
        // flex-shrink: 0;
        // flex-basis: 0;
        // flex-basis: auto;
        // max-width: 100%;
        // background-color: rgba($red, .1) !important;
        // border: 1px solid $red !important;
        // flex-basis: auto;
        // flex-grow: 1;
        // flex-basis: $grid-column-width;
      }

      // $debug: false;
      // $debug: false;

      .cell-#{ $breakpoint }-#{ $i } {
        // flex-grow: 1;
        // flex-shrink: 1;

        // @if $debug == true {
        //   // flex-basis: cell-width($grid-columns, $i, $grid-gutter-calc);
        //   // max-width: cell-width($grid-columns, $i, $grid-gutter-calc);
        //   // background-color: rgba($blue, .1) !important;
        // } @elseif $debug == false {
          flex-basis: cell-width();
          max-width: cell-width(); /* calc */
          max-width: $grid-column-width * 1%; /* grid-column */
          max-width: cell-width();
          // background-color: rgba($blue, .1) !important;
        // }

        // border: 1px solid $blue !important;
        // border: inset pxtopercent($grid-gutter-calc) solid red !important;
        // max-width: 100%;
        // flex-basis: $grid-column-width - $grid-gutter-calc;
        // max-width: $grid-column-width;

        &::after {
          content: "#{$grid-column-width * 1%}";
          display: none;
        }
      }

      // Compiles: cell-*-offset-# for each viewport
      //
      .cell-#{ $breakpoint }-offset-#{ $i } {
        margin-left: (cell-width());
      }
    }
  }
}
